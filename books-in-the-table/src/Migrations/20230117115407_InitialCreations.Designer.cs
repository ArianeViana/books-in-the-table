// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using books_in_the_table.Data;

#nullable disable

namespace booksinthetable.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230117115407_InitialCreations")]
    partial class InitialCreations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("books_in_the_table.Models.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Nationality")
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.AuthorPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("author_publisher");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Isbn10")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isbn10");

                    b.Property<string>("Isbn13")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isbn13");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int>("NumberPages")
                        .HasColumnType("integer")
                        .HasColumnName("number_pages");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.Property<string>("ReleaseYear")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release_year");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("publisher");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.AuthorPublisher", b =>
                {
                    b.HasOne("books_in_the_table.Models.Entities.Author", "Author")
                        .WithMany("AuthorPublishers")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("books_in_the_table.Models.Entities.Publisher", "Publisher")
                        .WithMany("AuthorPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.Book", b =>
                {
                    b.HasOne("books_in_the_table.Models.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("books_in_the_table.Models.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.Author", b =>
                {
                    b.Navigation("AuthorPublishers");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("books_in_the_table.Models.Entities.Publisher", b =>
                {
                    b.Navigation("AuthorPublishers");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
